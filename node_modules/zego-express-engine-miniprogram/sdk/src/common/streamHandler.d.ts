import { StateCenter } from "./stateCenter";
import { ERRO, ZegoResponse, ZegoRoomInfo } from "./zego.entity";
import { ZegoLogger } from "../common/zego.entity";
import { ZegoExpressWebRTM } from "zego-express-engine-webrtm/sdk/src";
import { ZegoStreamCenter } from "./streamCenter";
export declare class StreamHandler {
    private logger;
    private stateCenter;
    private rtm;
    private streamCenter;
    private roomID;
    private minStreamSeq;
    private streamSeq;
    private streamQuerying;
    private streamSeqMergeMap;
    private streamSeqMergeTimer;
    private streamListHBMergeInterval;
    private streamListMergeInterval;
    room?: ZegoRoomInfo;
    constructor(logger: ZegoLogger, stateCenter: StateCenter, rtm: ZegoExpressWebRTM, streamCenter: ZegoStreamCenter, roomID: string);
    private setCDNInfo;
    onStreamUpdated(roomid: string, type: number, streamList: any[]): void;
    onStreamExtraInfoUpdated(roomid: string, streamList: any[]): void;
    handleStreamStart(msg: any, room: ZegoRoomInfo): void;
    onPublishStateUpdate(type: number, streamId: string, error: ERRO): void;
    _updateStreamInfo(streamid: string, cmd: string | number, stream_extra_info?: string, success?: Function, error?: Function): void;
    updateStreamInfo(streamid: string, cmd: string | number, stream_extra_info?: string, success?: Function, error?: Function): void;
    handleStreamUpdateRsp(msg: any, streamid?: string, cmd?: number | string): void;
    handleStreamSync(msg: any, streamID: string, cmd?: string | number): void;
    handleStreamRsp(room: ZegoRoomInfo, streamID: string, streamInfo: any, cmd?: string | number): void;
    handleFetchStreamListRsp(msg: any, updateStreamID?: string): void;
    handleFullUpdateStream(serverStreamSeq: number, serverStreamList: any[]): void;
    handlePushStreamUpdateMsg(msg: any): void;
    handlePriPushStreamUpdateMsg(msg: any): void;
    private handleAddedStreamList;
    private handleDeletedStreamList;
    private handleUpdatedStreamList;
    fetchStreamList(streamID?: string): void;
    private handleReconnectStream;
    makeCallbackStreamList(streamList: any[]): any;
    sendBizChannelRequest(reqBody: any, success: Function, error: Function, isRetry?: boolean): void;
    sendBizChannelRequestV2(requestInfo: {
        server: number;
        location: string;
        cmd: string;
        channel?: string;
    }, reqBody: any, successCb: (rspBody: any) => {}, errorCb: (httpCode: number, BizError?: number, rspBody?: any, error?: any) => {}): void;
    updateStreamExtraInfo(streamid: string, extraInfo: string, success: Function, error: Function): void;
    setStreamExtraInfo(streamID: string, extraInfo: string, success: Function, error: (err: ERRO, errMsg: string) => void): void;
    _publishTarget(cdnPushConfig: any, success: (result: ZegoResponse) => void, error: (err: ERRO, externMsg?: string) => void): void;
    patchStreamList(msg: any): void;
    getStreamSeq(): number;
    mergeStreamByStreamSeq(cmd: number, streamSeq: number, streamList: any[]): void;
    handleMergeTimeout(): void;
    mergeStream(streamSeqList: any[]): void;
    reset(): void;
}

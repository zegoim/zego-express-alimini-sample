import { ConstraintExtend, Constraints, ERRO, ZegoDataReport } from "../common/zego.entity";
import { OSType } from "./interface";
export declare class ClientUtil {
    static checkIllegalCharacters(str: string): boolean;
    static isUrl(str: string): boolean;
    static registerCallback(fName: string, option: {
        success?: Function;
        error?: Function;
    }, callbackList: {
        [index: string]: Function;
    }): void;
    static actionErrorCallback(fName: string, callbackList: {
        [index: string]: Function;
    }): Function;
    static actionSuccessCallback(fName: string, callbackList: {
        [index: string]: Function;
    }): Function;
    static logReportCallback(logEvent: string, dataReport: ZegoDataReport, reportSeq: number, callbackList: {
        [index: string]: Function;
    }): void;
    static actionLogReportCallback(logEvent: string, callbackList: {
        [index: string]: Function;
    }, reportAction: string, eventName: string, args?: any): void;
    static getServerError(code: number, useNetAgent?: boolean, msg?: string): ERRO;
    static unregisterCallback(fName: string, callbackList: {
        [index: string]: Function;
    }): void;
    static decodeServerError(code: number, msg: string): {
        code: number;
        message: string;
    };
    static getLiveRoomError(code: number, useNetAgent?: boolean): string;
    static getKickoutError(code: number): any;
    static dataReportEvent(dataReport: ZegoDataReport, reportSeq: number, reportName: string, eventName: string, args: any): void;
    static isKeepTryLogin(code: number): boolean;
    static mergeStreamList(idName: string, oldStreamList: any[], newStreamList: any[], callbackResult: {
        (addStreamList: any[], delStreamList: any[], updateStreamList: any[]): void;
        (arg0: any[], arg1: any[], arg2: any[]): void;
    }): void;
    static checkInteger(num: number | undefined, positive?: boolean): boolean;
    static checkValidNumber(param: number, min?: number, max?: number): boolean;
    static uuid(len?: number, radix?: number): string;
    static getDevices(deviceInfoCallback: (res: {
        microphones: Array<{
            deviceName: string;
            deviceID: string;
        }>;
        speakers: Array<{
            deviceName: string;
            deviceID: string;
        }>;
        cameras: Array<{
            deviceName: string;
            deviceID: string;
        }>;
    }) => void, error: (err: ERRO) => void): void;
    static getPublisherStateType(type: 0 | 1 | 2): string;
    static getPlayerStateType(type: 0 | 1 | 2): string;
    static getSteamUpdateType(type: 0 | 1): string;
    static getNetQuality(rtt: number, lostRate: number, jitter?: number): number;
    static isIos(): boolean;
    static isMacOs(): boolean;
    static isAndroid(): boolean;
    static isWindows(): boolean;
    static isWin32(): boolean;
    static isLinux(): boolean;
    /**
     * 获取操作系统信息 os_type只有特定的枚举值
     */
    static getOsType(): OSType;
    static checkScreenParams(screen: Constraints["screen"], errorCallback: Function): boolean;
    static checkParamsWithConstraintExtend(constraints: {
        width?: number | ConstraintExtend;
        height?: number | ConstraintExtend;
        frameRate?: number | ConstraintExtend;
    }, errorCallback?: Function): boolean;
    static checkConstraintExtendWithMessage(constraintExtend: ConstraintExtend, param: string, limitMin?: number, // 每个参数限制的最小值
    limitMax?: number): {
        result: boolean;
        message: string;
    };
    static checkConstraintExtend(constraintExtend: ConstraintExtend, param: string, errorCallback?: Function, // for createStream
    limitMin?: number, // 每个参数限制的最小值（正整数）
    limitMax?: number): boolean;
    static checkBitRateLimit(bitRateValue: number, errorCallback: Function): boolean;
    static checkCameraOrScreenBitRate(bitRate: number | undefined, errorCallback: Function): boolean;
    static checkCameraParams(cameras: {
        width?: number | ConstraintExtend;
        height?: number | ConstraintExtend;
        frameRate?: number | ConstraintExtend;
        bitRate?: number;
    }, errorCallback: Function): boolean;
    static isParamEmpty(param: any): boolean;
    static isTypeString(param: any): boolean;
    static isTooLong(param: string, len: number): boolean;
    static isReDispatch(error: ERRO): boolean;
    static arrAvg(arr: Array<number>, val: any, shiftLen: number): any;
    static calcQualityOfRtt(rtt: number): number;
    static calcQualityOfJitter(jitter: number): number;
    static calcQualityOfLostRate(lostRate: number, isProbe: boolean): number;
    static quality2QualityGrade(quality: number): number;
    static checkAudioTrackIsActive(track: MediaStreamTrack): boolean;
    static checkVideoTrackIsActive(track: MediaStreamTrack): boolean;
    static isSupportEncodedTransforms(): boolean;
    static uint8arrayToBase64(u8Arr: Uint8Array): string;
    /**
     * 当前设备是否为移动设备
     * @returns boolean
     */
    static isMobile(): boolean;
}
export declare function generaStreamSid(appID: number, userID: string, streamID: string): number;
export declare function getPlaySourceType(mode: number): string;
